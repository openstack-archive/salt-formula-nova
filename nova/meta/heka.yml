log_collector:
  decoder:
    openstack:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/openstack_log.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
    {%- if pillar.nova.compute is defined %}
    nova_libvirt:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/libvirt_log.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
    {%- endif %}
  splitter:
    openstack:
      engine: token
      delimiter: '\n'
  input:
    nova_log_stream:
      engine: logstreamer
      log_directory: "/var/log/nova"
      file_match: '(?P<Service>.+)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['nova', '_', 'Service']
      priority: ["^Seq"]
      decoder: "openstack_decoder"
      splitter: "openstack_splitter"
    {%- if pillar.nova.compute is defined %}
    libvirt_log_stream:
      engine: logstreamer
      log_directory: "/var/log/libvirt"
      file_match: 'libvirtd.log'
      differentiator: ['libvirt']
      decoder: "libvirt_decoder"
      splitter: "TokenSplitter"
    {%- endif %}
metric_collector:
  filter:
    {%- if pillar.nova.compute is defined %}
    nova_compute_status:
      engine: sandbox
      module_file: /usr/share/lma_collector/filters/afd.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      preserve_data: false
      message_matcher: "(Type == 'metric' || Type == 'heka.sandbox.metric') && (Fields[name] == 'nova_check')"
      ticker_interval: 10
      config:
        afd_type: 'service'
        afd_file: 'lma_alarms_nova_compute_check'
        afd_cluster_name: 'nova_compute'
        afd_logical_name: 'check'
        activate_alerting: true
        enable_notification: false
    {%- endif %}
    {%- if pillar.nova.controller is defined %}
    nova_api_status:
      engine: sandbox
      module_file: /usr/share/lma_collector/filters/afd.lua
      module_dir: /usr/share/lma_collector_modules;/usr/share/heka/lua_modules
      preserve_data: false
      message_matcher: "(Type == 'metric' || Type == 'heka.sandbox.metric') && (Fields[name] == 'nova_check')"
      ticker_interval: 10
      config:
        afd_type: 'service'
        afd_file: 'lma_alarms_nova_api_check'
        afd_cluster_name: 'nova_api'
        afd_logical_name: 'check'
        activate_alerting: true
        enable_notification: false
    {%- endif %}
remote_collector:
  input:
    rabbitmq_nova_errors:
      engine: amqp
      host: 127.0.0.1
      port: 5673
      vhost: "/openstack"
      user: openstack
      password: password
      exchange: "nova"
      exchange_type: "topic"
      exchange_durability: false
      exchange_auto_delete: false
      queue_auto_delete: false
      queue: "lma_notifications.error"
      routing_key: "lma_notifications.error"
      decoder: "notification_decoder"
      splitter: "NullSplitter"
      can_exit: false
